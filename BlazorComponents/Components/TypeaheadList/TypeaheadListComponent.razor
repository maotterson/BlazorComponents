@using BlazorComponents.WASM.Components.TypeaheadList.Models;
@using BlazorComponents.WASM.Components.TypeaheadList.Utils;
@using BlazorComponents.WASM.Data.Models;
@using BlazorComponents.WASM.Data.Services;
@inject ExerciseService _exerciseService;
@inject IJSRuntime JSRuntime

<input class="form-control mb-3" @bind="@_search" type="text" @oninput="SearchChanged"/>

@foreach (var er in _filtered)
{
    <div>
        <div class="card-body border-bottom py-2">
            <h5 class="card-title">
                @{
                    var containsMatch = er.MatchingSubstrings.TryDequeue(out var matchingSubstring);
                    for (var i = 0; i < er.Exercise.Name.Length; i++)
                    {
                        if (containsMatch && i == matchingSubstring!.EndingIndex) containsMatch = er.MatchingSubstrings.TryDequeue(out matchingSubstring);
                        if (containsMatch && i >= matchingSubstring!.StartingIndex && i < matchingSubstring!.EndingIndex)
                        {
                            <b>@er.Exercise.Name[i]</b>
                        }
                        else
                        {
                            @er.Exercise.Name[i]
                        }
                    }
                }
            </h5>
            <h6 class="card-subtitle my-1 text-body-secondary">
                @foreach(var bg in er.Exercise.MuscleGroups)
                {
                    <span class="badge text-bg-success me-2">@bg.Name</span>
                }
            </h6>
        </div>
    </div>
}


@code {
    [Parameter]
    public bool ShowAllByDefault { get; set; } = true;

    private List<Exercise> _allExercises => _exerciseService.Exercises;
    private static List<ExerciseSearchResult> EMPTY_SEARCH_RESULTS = new List<ExerciseSearchResult>();
    private List<ExerciseSearchResult> _filtered = EMPTY_SEARCH_RESULTS;
    private string _search = string.Empty;
    private int _numMatches = 0;

    protected override async Task OnInitializedAsync()
    {
        await _exerciseService.Load();
        if (ShowAllByDefault) SearchChanged(new() { Value = "" });
    }

    private void SearchChanged(ChangeEventArgs args)
    {
        _search = args!.Value!.ToString()!;

        if (string.IsNullOrEmpty(_search) && ShowAllByDefault == false)
        {
            _filtered = EMPTY_SEARCH_RESULTS;
            _numMatches = 0;
            StateHasChanged();
            return;
        }

        var filteredEnumerable = _allExercises
                .Where(e => e.Name.Contains(_search));

        _numMatches = filteredEnumerable.Count();

        var filteredBegins = filteredEnumerable.Where(e => e.Name.StartsWith(_search)).OrderBy(e => e.Name);
        var filteredNotBegins = filteredEnumerable.Where(e => !e.Name.StartsWith(_search)).OrderBy(e => e.Name);
        var filteredOrdered = filteredBegins.Concat(filteredNotBegins).Take(10);
        _filtered = filteredOrdered.Select(e => {
            Console.WriteLine(e.Name);
            var item = new ExerciseSearchResult
            {
                Exercise = e,
                MatchingSubstrings = ExerciseSearchUtils.GetMatchingSubstrings(e.Name, _search)
                };
            return item;
        }).ToList();

        StateHasChanged();
    }
}
