@using BlazorComponents.WASM.Components.TypeaheadList.Models;
@using BlazorComponents.WASM.Data.Models;
@using BlazorComponents.WASM.Data.Services;
@inject ExerciseService _exerciseService;
@inject IJSRuntime JSRuntime

<input class="form-control mb-3" @bind="@_search" type="text" @oninput="SearchChanged"/>

@foreach (var ex in _filtered)
{
    <div>
        <div class="card-body border-bottom py-2">
            <h5 class="card-title">
                @for (var i = 0; i < ex.Key.Name.Length; i++)
                {
                    if (i >= ex.Value.Item1 && i < ex.Value.Item2)
                    {
                        <b>@ex.Key.Name[i]</b>
                    }
                    else
                    {
                        @ex.Key.Name[i]
                    }
                }
            </h5>
            <h6 class="card-subtitle my-1 text-body-secondary">
                @foreach(var bg in ex.Key.MuscleGroups)
                {
                    <span class="badge text-bg-success me-2">@bg.Name</span>
                }
            </h6>
        </div>
    </div>
}


@code {
    [Parameter]
    public bool ShowAllByDefault { get; set; } = true;

    private List<Exercise> _allExercises => _exerciseService.Exercises;
    private static Dictionary<Exercise, (int, int)> EMPTY_SEARCH_TABLE = new Dictionary<Exercise, (int, int)>();
    private Dictionary<Exercise, (int, int)> _filtered = EMPTY_SEARCH_TABLE;
    private string _search = string.Empty;
    private int _numMatches = 0;

    protected override async Task OnInitializedAsync()
    {
        await _exerciseService.Load();
        if (ShowAllByDefault) SearchChanged(new() { Value = "" });
    }

    private void SearchChanged(ChangeEventArgs args)
    {
        _search = args!.Value!.ToString()!;

        if (string.IsNullOrEmpty(_search) && ShowAllByDefault == false)
        {
            _filtered = EMPTY_SEARCH_TABLE;
            _numMatches = 0;
            StateHasChanged();
            return;
        }

        var filteredEnumerable = _allExercises
                .Where(e => e.Name.Contains(_search));

        _numMatches = filteredEnumerable.Count();

        var filteredBegins = filteredEnumerable.Where(e => e.Name.StartsWith(_search)).OrderBy(e => e.Name);
        var filteredNotBegins = filteredEnumerable.Where(e => !e.Name.StartsWith(_search)).OrderBy(e => e.Name);
        var filteredOrdered = filteredBegins.Concat(filteredNotBegins).Take(10);
        var _filtered2 = filteredOrdered.Select(e =>
        {
        new ExerciseSearchResult
            {
                Exercise = e,
                MatchedSearchIndices = new List<(int, int)>() { (e.Name.IndexOf(_search), e.Name.IndexOf(_search) + _search.Length)}
        });

        _filtered = filteredOrdered.ToDictionary(e => e, e => (e.Name.IndexOf(_search), e.Name.IndexOf(_search) + _search.Length));
        
        StateHasChanged();
    }
}
